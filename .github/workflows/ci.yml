name: System Monitor CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff pytest coverage
    
    - name: Lint with Ruff
      run: |
        ruff check --select=E9,F63,F7,F82 --show-files --show-fixes .
        ruff check . --show-files
    
    - name: Format check with Ruff
      run: |
        ruff format --check .
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest test_monitor.py -v
        coverage report -m
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run Bandit security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
    
    - name: Check dependencies for security issues
      run: |
        safety check -r requirements.txt || true

  functionality-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test system monitor functionality
      run: |
        # Test import
        python -c "from system_monitor import SystemMonitor; print('✓ Import successful')"
        
        # Test basic functionality
        python -c "
        from system_monitor import SystemMonitor
        import tempfile
        import json
        
        # Create test config
        config = {
          'email': {'smtp_server': 'localhost', 'smtp_port': 25, 'from_email': 'test@localhost', 'to_emails': ['admin@localhost'], 'use_authentication': False},
          'reports': {'output_dir': '/tmp', 'keep_days': 30},
          'monitoring': {'check_services': [], 'log_files': []}
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(config, f)
            config_path = f.name
        
        monitor = SystemMonitor(config_path)
        info = monitor.get_system_info()
        assert 'cpu' in info
        assert 'memory' in info
        assert 'disk' in info
        print('✓ System info collection successful')
        "
    
    - name: Test report generation
      run: |
        python system_monitor.py --test

  compatibility-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ['3.9', '3.11']
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test basic system monitoring
      run: |
        python -c "
        from system_monitor import SystemMonitor
        import tempfile
        import json
        
        config = {
          'email': {'smtp_server': 'localhost', 'smtp_port': 25, 'from_email': 'test@localhost', 'to_emails': ['admin@localhost'], 'use_authentication': False},
          'reports': {'output_dir': '/tmp', 'keep_days': 1},
          'monitoring': {'check_services': [], 'log_files': []}
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(config, f)
            monitor = SystemMonitor(f.name)
            
        # Test system info gathering
        info = monitor.get_system_info()
        print(f'✓ CPU cores: {info[\"cpu\"][\"count\"]}')
        print(f'✓ Memory total: {info[\"memory\"][\"total_gb\"]} GB')
        print(f'✓ Disk partitions: {len(info[\"disk\"])}')
        print('✓ System monitoring successful')
        "

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, security, functionality-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test secure installer
      run: |
        chmod +x install_secure.sh
        echo "Testing secure installer..."
        grep -q "sha256sum" install_secure.sh && echo "✓ Checksum verification present"
        grep -q "curl" install_secure.sh && echo "✓ Download mechanism present"
        grep -q "psutil odfpy" install_secure.sh && echo "✓ Dependencies specified"
    
    - name: Validate configuration schema
      run: |
        python -c "
        import json
        from system_monitor import SystemMonitor
        
        # Test default config loading
        monitor = SystemMonitor()
        config = monitor.config
        
        required_keys = ['email', 'reports', 'monitoring']
        for key in required_keys:
            assert key in config, f'Missing required config key: {key}'
        
        print('✓ Configuration schema validation passed')
        "

  verify-signatures:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Verify commit signatures
      run: |
        git log --show-signature --oneline -5 || true
        echo "✓ Signature check completed"

  release-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify release files
      run: |
        test -f checksums.txt && echo "✓ Checksums file exists"
        test -f SECURITY.md && echo "✓ Security documentation exists"  
        test -f install_secure.sh && echo "✓ Secure installer exists"
        test -f requirements.txt && echo "✓ Requirements file exists"
        test -f test_monitor.py && echo "✓ Tests exist"
        
        # Verify checksums
        sha256sum -c checksums.txt && echo "✓ Checksums verified"